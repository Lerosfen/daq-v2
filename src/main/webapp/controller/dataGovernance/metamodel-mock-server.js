/** * 元模型获取 *分页数据 */Mock.mock(wwwroot+'/dataGovernance/metamodel',function(options) {    var result = {        total: 8,        rows:[]    };    var offsetNum = getPostParam(options).offset;    for(var i = 0 ; i < 8 ; i++){        result.rows.push(Mock.mock({            "id":/[a-z][A-Z][0-9]/,            "metamodelName":"元模型"+(offsetNum+i),            "dataType":/string|float|boolen|number|double|time|date-time|date/,            "flag":/0|1/, //状态：0编辑，-1删除，1启用            "createTime":Mock.Random.datetime(),            "modifyTime":Mock.Random.datetime()        }));    };    return result;});//根据ID获取数据源信息Mock.mock(RegExp(wwwroot + '/dataGovernance/metamodel'+ ".*"),"get",function() {    return {        code:"code_200",        msg:"查询成功！",        data:Mock.mock({            "id":"12345",            "metamodelName":"字符串",            "dataType":"string",            "flag":/0|1/, //状态：0编辑，-1删除，1启用            "metamodelDesc":"字符串元模型，用于定义字符串类型元数据。",            "createTime":Mock.Random.datetime(),            "modifyTime":Mock.Random.datetime()        })    };});//获取元模型状态字典信息Mock.mock(wwwroot + '/base/api/dictionary/metamodel_status',"get",function() {    return {        code:"code_200",        msg:"查询成功！",        data:[{            dicName:"编辑",            dicCode:"0"        },{            dicName:"删除",            dicCode:"-1"        },{            dicName:"启用",            dicCode:"1"        }]    };});